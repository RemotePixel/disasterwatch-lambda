# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: disasterwatch
provider:
  name: aws
  runtime: nodejs4.3
  stage: production
  region: us-east-1
  deploymentBucket: remotepixel-east
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: "arn:aws:s3:::remotepixel-east/*"

functions:

  #MAILING
  sendMail:
    handler: mailing.checkImagery
    memorySize: 256
    timeout: 100
    events:
      - schedule: rate(2 hours)

  #http -> https
  toHTTPS:
    handler: https.toHTTPS
    memorySize: 128
    timeout: 10
    events:
      - http:
          method: GET
          path: toHTTPS
          integration: lambda
          request:
            template:
              application/json: '{ "url" : "$input.params(''url'')" }'
          cors: true

  #SENTINEL
  getS1Images:
    handler: peps.S1search
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: getS1Images
          method: post
          cors: true

  #DATABASE
  backup:
    handler: database.backup
    memorySize: 128
    timeout: 30
    events:
      - schedule: rate(1 day)

  add:
    handler: database.add
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: POST
          path: database/add
          request:
            passThrough: WHEN_NO_MATCH
          cors: true

  remove:
    handler: database.remove
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: POST
          path: database/remove
          request:
            passThrough: WHEN_NO_MATCH
          cors: true

  update:
    handler: database.update
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: POST
          path: database/update
          request:
            passThrough: WHEN_NO_MATCH
          cors: true

  toGEOJSON:
    handler: database.toGEOJSON
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: GET
          path: database/toGEOJSON
          request:
            passThrough: WHEN_NO_MATCH
          cors: true

  getEvent:
    handler: database.getEvent
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: GET
          path: database/getEvent
          request:
            passThrough: WHEN_NO_MATCH
          cors: true

  subscribe:
    handler: database.subscribe
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: POST
          path: database/subscribe
          request:
            passThrough: WHEN_NO_MATCH
          cors: true

  unsubscribe:
    handler: database.unsubscribe
    memorySize: 128
    timeout: 30
    events:
      - http:
          integration: lambda
          method: POST
          path: database/unsubscribe
          request:
            passThrough: WHEN_NO_MATCH
          cors: true
